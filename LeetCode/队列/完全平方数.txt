/*给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。
输入: n = 12
输出: 3
解释: 12 = 4 + 4 + 4.

输入: n = 13
输出: 2
解释: 13 = 4 + 9.*/

//考察队列+BFS
#include <iostream>
#include<queue>
#include<vector>
#include<algorithm>

using namespace std;

class Solution {
public:
	int numIslands(int n) {

		int sqrtMax = sqrt(n);

		if (sqrtMax * sqrtMax == n)
		{
			return 1;
		}

		vector<int> sqrtNum;
		for (int i = 1; i < n; i++)
		{
			int temp = sqrt(i);
			if (temp * temp == i)
			{
				sqrtNum.push_back(i);
			}
		}

		queue<int> q;
		for (unsigned int j = 0; j < sqrtNum.size(); j++)
		{
			q.push(sqrtNum[j]);
		}

		int res = 1;
		while (!q.empty())
		{
			res++;
			unsigned int size = q.size();
			for (unsigned i = 0; i < size; i++)
			{
				int sum = q.front();

				for (unsigned j = 0; j < sqrtNum.size(); j++)
				{
					int temp;
					temp = sum + sqrtNum[j];
					if (temp == n)
					{
						return res;
					}

					q.push(temp);
				}
				q.pop();
			}
		}
		return 0;
	}
};



int main()
{
	int n;

	cin >> n;

	Solution sol;
	int res;
	res = sol.numIslands(n);

	cout << res << endl;

	return 0;
}