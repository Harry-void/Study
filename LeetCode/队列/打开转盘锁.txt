/*你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
输出：6
解释：
可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
因为当拨动到 "0102" 时这个锁就会被锁定。

输入: deadends = ["8888"], target = "0009"
输出：1
解释：
把最后一位反向旋转一次即可 "0000" -> "0009"。

输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
输出：-1
解释：
无法旋转到目标数字且不被锁定。

输入: deadends = ["0000"], target = "8888"
输出：-1*/

//考察队列+BFS
//有时间限制，考察容器使用，在大容量中查找元素，set容器效率更高，比vector好
//std::find函数通用性强，但算法效率不好，数据量很大时，效率很低。 当数据量大的时候，考虑特定容器的find函数，效率高点

#include <iostream>
#include<queue>
#include<vector>
#include<set>
using namespace std;

class Solution {
public:

	int turnToNumber(string a)
	{
		int qian = a[0];
		int bai = a[1];
		int shi = a[2];
		int ge = a[3];
		int res = (qian - 48) * 1000 + (bai - 48) * 100 + (shi - 48) * 10 + (ge - 48);
		return res;
	}

	int openLock(vector<string>& deadends, string target) {
		int res = 0;
		queue<string> q;
		bool visited[10000];
		memset(visited, 0, sizeof(visited));//标记是否被访问过
		set<string> deadendsSet(deadends.begin(), deadends.end());

		set<string>::iterator itor = deadendsSet.find("0000");
		if (itor != deadendsSet.end())
		{
			return -1;
		}

		q.push("0000");
		visited[0] = true;

		while (!q.empty())
		{
			res++;
			unsigned int size = q.size();
			for (unsigned int j = 0; j < size; j++)
			{
				for (int i = 0; i < 4; i++)
				{
					string curs = q.front();
					char* temp = (char*)curs.c_str();
					string fspush, aspush;
					if (temp[i] == '0')
					{
						temp[i] = '9';
						fspush = temp;
						temp[i] = '1';
						aspush = temp;
					}
					else if (temp[i] == '9')
					{
						temp[i] = '8';
						fspush = temp;
						temp[i] = '0';
						aspush = temp;
					}
					else
					{
						temp[i] = temp[i] - 1;
						fspush = temp;
						temp[i] = temp[i] + 2;
						aspush = temp;
					}
					if (fspush == target || aspush == target)
					{
						return res;
					}

					set<string>::iterator itor = deadendsSet.find(fspush);
					if (itor == deadendsSet.end() && visited[turnToNumber(fspush)] == false)
					{
						q.push(fspush);
						visited[turnToNumber(fspush)] = true;
					}

					itor = deadendsSet.find(aspush);
					if (itor == deadendsSet.end() && visited[turnToNumber(aspush)] == false)
					{
						q.push(aspush);
						visited[turnToNumber(aspush)] = true;
					}
				}
				q.pop();
			}
		}
		return -1;
	}
};


int main()
{
	//vector<string> deadends{ "0201", "0101", "0102", "1212", "2002" };
	//string target = "0202";
	//vector<string> deadends{ "0000"};
	string target = "8888";
	vector<string> deadends{ "8887", "8889", "8878", "8898", "8788", "8988", "7888", "9888" };
	//string target = "8888";
	//vector<string> deadends{ "8888"};
	//string target = "0009";


	Solution sol;
	int res;
	res = sol.openLock(deadends, target);

	cout << res << endl;


	return 0;
}