//øº≤Ï∂”¡–+BFS
#include <iostream>
#include<queue>
#include<vector>

using namespace std;

class Solution {
public:
	int numIslands(vector<vector<char>>& grid) {

		queue<int> q;

		int res = 0;

		for (unsigned i = 0; i < grid.size(); i++)
		{
			for (unsigned j = 0; j < grid[0].size(); j++)
			{
				if (grid[i][j] == '1')
				{
					q.push(i);
					q.push(j);
					grid[i][j] = '0';
					while (!q.empty())
					{
						int x = q.front();
						q.pop();
						int y = q.front();
						q.pop();
						int m, n;

						m = x + 1; n = y;
						if (m >= 0 && n >= 0 && m < grid.size() && n < grid[i].size())
						{
							if (grid[m][n] == '1')
							{
								q.push(m);
								q.push(n);
								grid[m][n] = '0';
							}
						}

						m = x - 1; n = y;
						if (m >= 0 && n >= 0 && m < grid.size() && n < grid[i].size())
						{
							if (grid[m][n] == '1')
							{
								q.push(m);
								q.push(n);
								grid[m][n] = '0';
							}
						}

						m = x; n = y + 1;
						if (m >= 0 && n >= 0 && m < grid.size() && n < grid[i].size())
						{
							if (grid[m][n] == '1')
							{
								q.push(m);
								q.push(n);
								grid[m][n] = '0';
							}
						}

						m = x; n = y - 1;
						if (m >= 0 && n >= 0 && m < grid.size() && n < grid[i].size())
						{
							if (grid[m][n] == '1')
							{
								q.push(m);
								q.push(n);
								grid[m][n] = '0';
							}
						}
					}
					res++;
				}
			}
		}

		return res;
	}
};



int main()
{
	vector<vector<char>> data;

	char n;

	for (int i = 0; i < 1; i++)
	{
		data.push_back(vector<char>());
	}

	for (unsigned int i = 0; i < data.size(); i++)
	{
		for (int j = 0; j < 40; j++)
		{
			cin >> n;
			data[i].push_back(n);
		}
	}

	//for (int i = 0; i < 4; i++)
	//{
	//	for (int j = 0; j < 5; j++)
	//	{
	//		cout << data[i][j];
	//	}
	//	cout << endl;
	//}

	Solution sol;
	int res;
	res = sol.numIslands(data);

	cout << res << endl;

	return 0;
}